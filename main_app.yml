application:
  configuration:
    input.db-name: petclinic
    input.lb-bucket: http://roundrobin:80    
    input.app-fork: qubell
    input.app-branch: HEAD #red, master
    input.app-quantity: "1"

  bindings:
    - [main.workflow, db]
    - [main.workflow, app]
    - [main.workflow, lb]

  interfaces:
    input:
      db-name: "bind(main.workflow#input.db-name)"
      app-fork: "bind(main.workflow#input.app-fork)"
      app-branch: "bind(main.workflow#input.app-branch)"
      lb-bucket: "bind(main.workflow#input.lb-bucket)"
      app-quantity: "bind(main.workflow#input.app-quantity)"
    ui-output:
      lb: "bind(lb#output.lb-stats)"
      app: "bind(app#output.app-host)"
      db: "bind(db#output.dbms)"

  components:
    main:
      bindings:
        - [wfService, workflow]
      components:
        wfService:
          type: reference.Service
          interfaces:
            executor:
              execute-workflow: receive-command(object request => object status => object status)
              execute-command: send-command(string interface, string command, map<string, object> arguments => map<string, object> response => map<string, object> response)
        workflow:
          type: workflow.Instance
          #todo: think on env properties
          interfaces:
            input:
              db-name: configuration(string)
              scm-provider: configuration(string)
              app-fork: configuration(string)
              app-branch: configuration(string)
              lb-bucket: configuration(string)
              app-quantity: configuration(string)
              #as constants
              db-sql-url: configuration(list<string>)
              db-user: configuration(string)
              db-password: configuration(string)
              privileges: configuration(list<string>)
              lbstats-stats-user: configuration(string)
              lbstats-stats-pass: configuration(string)
              lbstats-stats-port: configuration(string)
              lbstats-stats-url: configuration(string)
            db-info:
              dbms: consume-signal(object)
              db-host: consume-signal(list<string>)
              db-port: consume-signal(string)
            db-manage:
              create-db: send-command(string db-name)
              change-grants: send-command(list<string> app-host, string db-name, string db-user, string db-password, list<string> privileges)
              run-sql: send-command(string db-name, list<string> sql-url)
            app-manage:
              deploy-app: send-command(string scm-provider, string app-fork, string app-branch, list<string> db-host, string db-port, string db-name, string db-user, string db-password)
            app-output:
              app-host: consume-signal(list<string>)
              app-port: consume-signal(string)
            lb-manage:
              add-server: send-command(list<string> app-host, string app-port, string lb-bucket)
              del-server: send-command(list<string> app-host, string app-port , string lb-bucket)

          required: [db-manage, app-manage, lb-manage, db-info, app-output]
          configuration:
            input.db-sql-url: ["https://raw.github.com/qubell/starter-java-web/master/src/main/resources/db/mysql/petclinic-mysql-schema.sql", "https://raw.github.com/qubell/starter-java-web/master/src/main/resources/db/mysql/petclinic-mysql-dataload.sql"] 
            input.db-user: petclinic #const
            input.db-password: petclinic #const
            input.privileges: ["all"] #const
            input.scm-provider: git #const
            input.lbstats-stats-user: admin
            input.lbstats-stats-pass: pa55w0rd
            input.lbstats-stats-port: "1926"
            input.lbstats-stats-url: /admin?stats
            configuration.triggers: {}
            configuration.workflows:
              launch:
                parameters:
                  - db-name: &db-name
                      description: primary db name
                  - db-sql-url: &db-sql-url
                      description: sql url
                  - db-user: &db-user
                      description: user for new database
                  - db-password: &db-password
                      description: user password for new database
                  - privileges: &privileges
                      description: user privileges for new database
                  - app-fork: &app-fork
                      description: git fork
                  - app-branch: &app-branch
                      description: git branch
                  - lbstats-stats-user: &lbstats-stats-user
                      description: lb statistic user
                  - lbstats-stats-pass: &lbstats-stats-pass
                      description: lb statistic user's password 
                  - lbstats-stats-port: &lbstats-stats-port
                      description: lb statistic port
                  - lbstats-stats-url: &lbstats-stats-url
                      description: lb statistic's url
                steps:
                  - get-env-props:
                      action: getEnvironmentProperties
                      phase: get-env-props
                      output:
                        props: result 
                  - create-db:
                      action: serviceCall
                      phase: create-db
                      precedingPhases: [ get-env-props ]
                      parameters:
                        service: db-manage
                        command: create-db
                        arguments:
                          db-name: "{$.db-name}"
                  - grant-db:
                      action: serviceCall
                      precedingPhases: [ create-db ]
                      phase: grant-db
                      parameters:
                        service: db-manage
                        command: change-grants
                        arguments:
                          app-host: "{$.props.app-output.app-host}"
                          #app-host: ["%"]
                          db-name: "{$.db-name}"
                          db-user: "{$.db-user}"
                          db-password: "{$.db-password}"
                          privileges: "{$.privileges}"
                  - run-sql:
                      action: serviceCall
                      precedingPhases: [ grant-db ]
                      phase: run-sql
                      parameters:
                        service: db-manage
                        command: run-sql
                        arguments:
                          db-name: "{$.db-name}"
                          sql-url: "{$.db-sql-url}"
                  - deploy-app:
                      action: serviceCall
                      phase: deploy-app
                      precedingPhases: [ get-env-props ]
                      parameters:
                        service: app-manage
                        command: deploy-app
                        arguments:
                           scm-provider: git
                           app-fork: "{$.app-fork}"
                           app-branch: "{$.app-branch}"
                           db-host: "{$.props.db-info.db-host}"
                           db-port: "{$.props.db-info.db-port}"
                           db-name: "{$.db-name}"
                           db-user: "{$.db-user}"
                           db-password: "{$.db-password}"
                  - lb-add-server:
                      action: serviceCall
                      precedingPhases: [ deploy-app ]
                      phase: lb-add-server
                      parameters:
                        service: lb-manage
                        command: add-server
                        arguments:
                          app-host: "{$.props.app-output.app-host}"
                          app-port: "{$.props.app-output.app-port}"
                          lb-bucket: "http://roundrobin:80/"
                          #todo move lb-bucket to launch param
                #todo: enpoint
              destroy:
                steps: []

    db:
      type: reference.Submodule
      configuration:
        __locator.application-id: "524d3c35e4b0a49c99bce659"
      interfaces:
        input:
          db-version: configuration(string)
          db-root-password: configuration(string)
        management:
          create-db: receive-command(string db-name)
          run-sql: receive-command(string db-name, list<string> sql-url)
          change-grants: receive-command(list<string> app-host, string db-name, string db-user, string db-password, list<string> privileges)
        output:
          dbms: publish-signal(object)
          db-host: publish-signal(list<string>)
          db-port: publish-signal(string)

    app:
      type: reference.Submodule
      configuration:
        __locator.application-id: "52541baae4b0d1f365e542ef"
      interfaces:
        input:
          quantity: configuration(string)
        management:
          deploy-app: receive-command(string scm-provider, string app-fork, string app-branch, list<string> db-host, string db-port, string db-name, string db-user, string db-password)
        output:
          app-host: publish-signal(list<string>)
          app-port: publish-signal(string)

    lb:
      type: reference.Submodule
      configuration:
        __locator.application-id: "52543586e4b0d1f365e5431b"
      interfaces:
        input:
          stats-user: configuration(string)
          stats-pass: configuration(string)
          stats-port: configuration(string)
          stats-url: configuration(string)
        lb-management:
          add-server: receive-command(list<string> app-host, string app-port, string lb-bucket)
          del-server: receive-command(list<string> app-host, string app-port , string lb-bucket )
        output:
          lb-stats: publish-signal(object)
